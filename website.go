// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// faucet.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x3a\xeb\x93\xe3\x34\xf2\x9f\x87\xbf\xa2\xf1\x6f\x21\xce\x6f\xc6\x76\xb2\xc3\xab\x92\x38\x57\x7b\x0b\x47\xed\x55\x1d\x6c\x1d\x50\x77\x57\xc0\x07\xc5\xea\xc4\x9a\x91\x25\x23\xc9\xc9\x84\x54\xfe\xf7\x2b\xc9\x8f\xf8\x95\x61\x81\xbd\x2f\xbb\xb2\xba\xd5\xef\x6e\x75\x2b\xb3\xfa\xf0\xcb\x6f\x5f\x7f\xff\x9f\xb7\x5f\x41\x6a\x32\xbe\xfe\x60\x65\xff\x03\x4e\xc4\x2e\xf6\x50\x78\xeb\x0f\x00\x56\x29\x12\x6a\x17\x00\xab\x0c\x0d\x81\x24\x25\x4a\xa3\x89\xbd\xc2\x6c\x83\x2f\x3c\x88\xda\xc0\xd4\x98\x3c\xc0\x5f\x0a\xb6\x8f\xbd\x7f\x07\x3f\xbc\x0a\x5e\xcb\x2c\x27\x86\x6d\x38\x7a\x90\x48\x61\x50\x98\xd8\x7b\xf3\x55\x8c\x74\x87\xbd\xb3\x82\x64\x18\x7b\x7b\x86\x87\x5c\x2a\xd3\x42\x3f\x30\x6a\xd2\x98\xe2\x9e\x25\x18\xb8\x8f\x3b\x60\x82\x19\x46\x78\xa0\x13\xc2\x31\x9e\x3b\x52\x25\x2d\xc3\x0c\xc7\xf5\xe9\x04\xe1\x37\x24\x43\x38\x9f\xe1\x6f\xa4\x48\xd0\xac\xa2\x12\x52\xa1\x71\x26\x1e\xdd\x0a\x20\x55\xb8\x8d\x3d\x2b\xba\x5e\x44\x51\x42\xc5\x83\x0e\x13\x2e\x0b\xba\xe5\x44\x61\x98\xc8\x2c\x22\x0f\xe4\x29\xe2\x6c\xa3\x23\x73\x60\xc6\xa0\x0a\x36\x52\x1a\x6d\x14\xc9\xa3\xfb\xf0\x3e\xfc\x3c\x4a\xb4\x8e\x9a\xbd\x30\x63\x22\x4c\xb4\xf6\x2a\x0e\x0a\x79\xec\x69\x73\xe4\xa8\x53\x44\x53\x6e\xd7\xca\xff\x51\x49\xb6\x52\x98\x80\x1c\x50\xcb\x0c\xa3\x4f\xc2\xcf\xc3\x99\x13\xa2\xbd\xfd\xae\x72\x94\x82\xe8\x44\xb1\xdc\x80\x56\xc9\x3b\xcb\xf0\xf0\x4b\x81\xea\x18\xdd\x87\xf3\x70\x5e\x7d\x38\x9e\x0f\xda\x5b\xaf\xa2\x92\xe0\xfa\x4f\x52\x0f\x84\x34\xc7\xe8\x65\xf8\x49\x38\x8f\x72\x92\x3c\x92\x1d\xd2\x9a\x97\x05\x85\xf5\xe6\x7b\xe4\x7c\xcd\xcb\x0f\x7d\x27\xbf\x1f\x76\x99\xcc\x50\x98\xf0\x41\x47\x2f\xc3\xf9\x17\xe1\xac\xde\x18\x72\xa8\x58\x58\x17\xae\x2b\xa7\x86\x7b\x54\x86\x25\x84\x07\x09\x0a\x83\x0a\x4e\x15\x00\x20\x63\x22\x48\x91\xed\x52\xb3\x80\xf9\x6c\xf6\xd1\xf2\x1a\x64\x9f\x5e\x40\x94\xe9\x9c\x93\xe3\x02\xb6\x1c\x9f\x2e\xdb\x84\xb3\x9d\x08\x98\xc1\x4c\x2f\xa0\xe4\x54\x03\xcf\xb5\x24\xb9\x92\x3b\x85\x5a\xb7\x44\xc8\xa5\x66\x86\x49\xb1\xb0\xc1\x47\x0c\xdb\xe3\xf5\x53\x3a\x27\x62\xf4\x28\xd9\x68\xc9\x0b\x83\x23\x42\x6e\xb8\x4c\x1e\x2f\xfb\xae\x3c\xf4\x95\x4d\x24\x97\x6a\x01\x87\x94\x99\x01\xf7\x5c\x61\x9b\x25\xa1\x94\x89\xdd\x02\x3e\xcb\x5b\xaa\x67\x44\xed\x98\x58\xc0\xac\x7b\x78\x15\x35\x7e\x58\x45\x65\x99\xb4\xcb\x8d\xa4\xc7\x2a\x14\x28\xdb\x43\xc2\x89\xd6\xb1\xd7\x73\x92\x57\x7b\xaf\x8d\x63\x2b\x1e\x61\xa2\x05\xed\xc2\x95\x3c\x78\xe0\x78\xc6\x5e\x29\x53\xb0\x91\xc6\xc8\x6c\x01\xf3\xcf\xf2\xa7\xd6\xa9\x3e\x5d\x1e\xf0\x5d\x30\x7f\xd9\xc1\xb0\xb5\x7d\x5e\x93\x33\xf8\x64\x02\xe7\xe2\xda\xb9\x3d\x5c\x80\x15\xab\xe9\x6d\x09\x6c\x49\xb0\x21\x26\xf5\x80\x28\x46\x82\x94\x51\x8a\x22\xf6\x8c\x2a\xd0\x46\x2b\xeb\x9f\x7d\x55\x98\x14\x85\x35\x80\x41\x5a\x15\xe4\xae\x28\x51\x3a\xef\x88\x1f\x51\xb6\x6f\x59\xa1\xf7\xd9\x33\xca\x6f\x28\xfe\x05\x54\x0b\xb9\xdd\x6a\x34\xc1\xc0\x0e\xad\x23\x4c\xe4\x85\x09\x76\x4a\x16\xf9\x88\x05\x2c\xb0\xb7\x09\xc0\x68\xec\x15\x8a\x7b\x03\x40\x79\xa3\x8d\x82\xcc\x31\xaf\xac\x3e\x84\xd5\x56\x96\x2a\x0b\x6c\x48\x28\x39\x42\x20\xe7\x24\xc1\x54\x72\x8a\x2a\xf6\xde\x72\x24\x1a\xc1\x89\x07\x47\x59\x28\x38\x10\xce\xd1\x00\xa1\xd4\x66\x56\x18\x86\x7d\x0a\xd1\x40\x39\x97\x7d\x43\x2b\x04\x1b\x23\x06\x96\xb0\x61\x5e\x18\x23\xc5\x60\xbf\x11\x7f\x63\x04\x6c\x8c\x08\x28\x6e\x49\xc1\x0d\x50\x25\x73\x2a\x0f\x22\x30\x72\xb7\xe3\x38\xd4\xa8\x36\x4a\x49\x78\x0c\x4e\x89\x21\xd5\xf1\xd8\xab\xe9\x8d\x21\x96\x41\x49\x74\x2e\xf3\x22\xaf\xc2\xf2\x1a\x1a\x3e\xe5\x44\x50\xa4\x36\xac\xb9\x1e\xc1\x1b\xea\x0e\xf0\x35\xdb\x23\x64\x38\x02\xe9\x67\x49\x42\x14\x9a\xc0\x09\xfa\x8e\xb9\x62\xa3\xbd\xb4\xc1\x08\xa4\xe0\x35\xf9\xc6\x9e\x19\x8a\x02\x3a\x5f\x81\xb2\x85\x7d\xc4\x69\x00\xa7\x93\x22\x62\x87\xf0\x82\xd1\xa7\x3b\x78\x41\x32\x59\x08\x03\x8b\x18\xc2\x57\x6e\xa9\xcf\xe7\x31\xa5\xf8\x88\x94\x0e\x40\x46\xb7\xe1\x99\xb2\x72\xe5\x80\x14\x09\x67\xc9\x63\xec\x19\x86\x2a\x3e\x9d\xac\x80\xe7\xf3\x12\x4e\x27\xb6\x85\x17\xe1\x3f\x31\x21\xb9\x49\x52\x72\x3e\xef\x54\xbd\x0e\xf1\x09\x93\xc2\xa0\x3f\x3d\x9d\x90\x6b\x3c\x9f\x75\xb1\xc9\x98\xf1\xeb\xe3\x76\x5f\xd0\xf3\xf9\x1a\xd3\xf5\xe9\x54\x99\xe0\x7c\x86\xc8\xf2\x12\x14\x9f\xe0\x45\xf8\x16\x15\x93\x54\x43\x49\x66\x15\x8d\xab\x39\x66\x93\x55\x34\x6e\xab\x4a\x92\x11\x5f\x17\x7c\x90\x8a\x91\xcd\xc5\x5e\x8d\xea\x56\xc0\x92\x24\xdb\x42\xdb\x32\x83\xa2\xd6\xa3\x5b\x45\xce\x2e\x68\x2c\xd8\x37\x8c\xcb\x30\xcd\x0c\x3e\xe2\x31\xf6\x4e\xa7\x36\xf5\x51\xdc\x84\x70\xbe\x21\xd6\x6f\xa5\xe9\xaf\x10\xfc\x15\x6d\x4d\xd9\x33\xed\x26\x81\x0e\xce\x7a\x54\xb3\xbe\xb1\x9e\xbb\x0f\x5a\x1f\xed\x65\xbb\x29\x03\x88\x22\xf8\x9a\xcb\x0d\xe1\xb0\xb7\x69\xb8\xe1\xa8\xc1\x48\xb0\x15\x14\x4c\x8a\x90\x14\x4a\xa1\x30\xa0\x0d\x31\x85\x06\xb9\x75\xbb\xdb\xf6\x4d\xb5\x27\x0a\x88\x31\x98\xe5\x06\xe2\x4b\x33\x60\xb7\x35\xaa\xfd\xa5\x1f\xb2\x3b\x36\x8c\xfb\x58\x0a\x7f\x29\x50\x1b\x0d\x31\xfc\xf8\xf3\xf2\x83\x8b\x64\x5f\xe2\x96\x09\x04\x02\xdb\x42\x24\xb6\xe5\x01\x93\x12\x03\x89\x42\x62\x50\x43\xc2\xa5\x2e\x54\x29\xb0\x4d\x74\xb0\x42\xd7\xc4\x5a\xf4\x2d\x2c\x77\x6c\x6b\x3a\x7e\x4a\x74\x3a\x6d\x1a\x9c\x1b\x85\xa6\x50\xe2\x02\x6e\x81\x6e\xb6\x52\x81\x6f\xc9\xb0\x78\xb6\x04\xb6\xaa\x19\x84\x1c\xc5\xce\xa4\x4b\x60\xb7\xb7\x6d\xfc\x1b\xb6\x05\xbf\x46\xfa\x91\xfd\x1c\x9a\xa7\xd0\xb2\x83\x38\x86\x1e\xdb\x9b\x9b\x9b\x86\x9a\xce\x39\x4b\xd0\x67\x77\x30\x9f\x2e\x5b\x08\x1b\x85\xe4\xb1\xb5\x71\x6e\x96\xcd\xaa\x5e\x9c\x97\x03\xd3\x39\x67\x75\x8c\x57\xc6\xa3\x06\x02\x3b\xa6\x0d\x14\x8a\x5b\xf3\x59\xbc\xd2\x59\x6d\xef\x39\xd4\xb6\xd9\x06\xa9\x55\x2d\xaa\xc0\x6c\xa9\x56\x12\x0b\x35\x0a\xea\xff\xfd\xbb\x6f\xbf\x09\xb5\x51\x4c\xec\xd8\xf6\xe8\x9f\x0a\xc5\x17\xf0\xc2\xf7\xfe\xcf\xb6\x00\xd3\x1f\x67\x3f\x87\x7b\xc2\x0b\xbc\x73\xc1\xb1\x70\xff\x0e\x18\xdd\x41\xb5\x5c\x40\x97\xe7\x79\x3a\x5d\x5e\xcb\xf8\x9b\x56\x4d\x54\xa8\xd1\xf8\x16\xb7\x9d\x43\x23\x26\x23\x90\xa1\x49\x25\xb5\x66\x51\x98\x48\x21\x30\x31\x50\xe4\x52\x54\x16\x02\x2e\xb5\xee\x84\x6f\x8d\x14\x8f\x46\x50\x75\x2a\x06\x81\x07\xf8\x17\x6e\xbe\x93\xc9\x23\x1a\xdf\xf7\x0f\x4c\x50\x79\x08\xb9\x4c\x88\x3d\x63\x1b\x7e\x23\x13\xc9\x21\x8e\x63\xa8\x66\x24\x6f\x0a\x7f\x01\xef\xa0\xed\xb4\xe4\xc1\xc2\x2e\xed\x6a\x0a\xb7\xd0\x3f\x9e\x4a\x6d\xe0\x16\xbc\x88\xe4\xcc\x9b\x36\x79\x54\xbb\x42\x8a\x0c\xb5\x26\x3b\x6c\x8b\x89\x7b\x14\xa6\x1d\x91\x56\xa1\x4c\xef\x20\x06\xe7\xb5\x9c\x28\x8d\x25\x56\x68\x6b\x56\x2b\x34\x6d\x98\x3b\xcc\x38\x06\x51\x70\xde\x89\xeb\x32\xa1\x96\xad\x58\xed\x9f\x0b\x51\x29\xa9\xe0\xc3\x38\x86\x42\x50\x67\x7a\xda\x21\x61\x67\x58\xff\xc4\xc9\x51\x16\x66\x01\x13\x23\xf3\xd7\xee\xa6\x9c\xdc\x81\xbd\x3e\x17\xd0\x10\xb9\x73\x1d\xd2\x02\x26\xee\xcb\xc2\x59\x86\xee\xd4\xa7\xb3\xd9\xec\x0e\xea\x41\xea\xaf\xc4\x46\x97\x2a\xf0\x3c\x5d\x0e\xb3\xa8\x11\x4c\x17\x49\x62\xc7\xae\x3f\x29\x5a\x45\xa6\x11\xae\xfa\xfe\xd3\xe2\x35\xd5\xb2\x23\x1f\x7c\xfc\x31\x0c\xa0\x03\xb7\x44\x11\xfc\x83\xa8\x47\x20\x9c\xdb\x09\x6f\xcf\x64\xa1\x2f\xe5\x37\x63\x5a\x33\xb1\x03\xa2\x81\x4a\x81\x97\x63\xbf\xbb\x04\x0e\x84\xad\x30\x61\x0d\xb3\xbe\xa4\x36\xff\x5b\x25\x72\xa4\x72\x76\x49\x0f\x2a\x62\xcb\x46\x23\xc5\x97\x65\x08\x1f\xc6\xe0\x79\x3d\x2a\x03\x24\x8b\xd3\xa6\x7a\xa3\xd1\x7c\x5f\x7a\xca\xaf\x6e\x90\xb1\xb2\x3e\xbd\x83\xfb\xd9\x6c\x36\xbd\x22\xd0\xb9\x63\xfc\x57\x79\x8e\x82\x02\x11\x47\x57\x0c\x1a\xcb\x33\x61\x24\xd8\xf9\xc4\x26\x33\xb7\x63\x19\x47\x97\xa0\x97\xd3\xd6\xfc\x89\xcc\x32\x29\x20\x86\x60\xbe\x1c\xbf\x6f\x5a\x76\xee\xea\xdb\x77\xe1\x88\x73\x46\xdc\xd8\x35\x67\x0f\x3f\x98\x77\x1c\xd7\xf1\xe9\x55\xe7\xdd\x34\x3a\xb0\x8e\xb1\x87\x5e\xed\xb8\x75\xdc\xa2\x2d\xa5\x4a\xb2\xb7\xf3\x77\xd7\xad\xc1\xc8\x0b\x9d\xfa\x3d\xe9\xa7\xa3\x37\xae\x75\xe1\x1b\x83\x8a\x18\x04\x69\x6b\xba\x75\x99\x9d\xdf\x15\x0e\x3c\x07\x44\xd8\x66\x24\x50\x28\x28\xaa\xfa\x22\xa6\x36\xbf\x8c\x6d\xb3\xfa\x9e\x75\x8f\xba\xfd\x20\x6c\x29\x38\x30\xfe\x12\x18\xac\x6d\x27\x05\x2c\x08\xba\xaa\xb9\xa6\x47\x0a\xb4\xdf\xbd\x8c\x72\x91\xde\x0f\x75\x8b\x8f\x9c\xe4\x1a\x29\xc4\x50\x3e\xb2\xf9\xd3\xb0\x10\xec\xc9\x9f\x06\xd5\x77\x9f\x4c\x0d\xbf\x5c\x34\xce\xbb\xa5\x1e\xb7\x31\x78\x2b\xa3\x80\xd1\x78\xe2\xc1\xed\x58\x56\xdb\xab\x6a\xb2\xee\xc8\xd1\x3e\x0d\xb0\x32\x74\xed\x9e\x20\xca\xa1\xe9\x27\xcf\x36\xd4\x76\xf6\x16\x74\x61\xfb\x16\x7f\x40\x99\xec\x89\x21\xca\x11\x9e\x2e\xe1\x82\xee\x3a\xed\x05\x24\xd6\x67\xcb\xea\x2d\xec\xfe\x65\xfe\xb4\x84\xfa\xad\xaf\xfc\xda\x48\x45\x51\x05\x8a\x50\x56\xe8\x05\x7c\x92\x3f\x2d\x7f\xf2\xaa\x46\x7c\x15\x19\xfa\x9b\xd2\xe6\x0a\xd7\x03\xa1\x92\xc4\x0d\x93\xb7\xe0\xad\x22\x8b\xf0\x0e\x94\x1a\x95\xdb\xef\x76\x30\x9c\x1a\x97\xd0\xbc\x9f\x55\xfb\x19\xa3\x94\xa3\x15\xbb\xc3\xc1\xe6\xb1\x8d\x88\x5e\x36\x76\x19\x83\x8b\x50\xa4\x9d\x93\x67\xb0\x23\xe4\xf3\xc7\xca\x37\x12\xeb\x6b\x1b\x18\x81\xb5\x00\x73\x5e\xa8\x46\x2b\xb7\xad\x26\xce\x34\xd5\x13\x2e\x2d\x94\xeb\x5a\xfc\xa0\x0a\xbc\x3b\x98\x68\xdb\x48\x51\x3d\x99\x86\x69\x91\x11\xc1\x7e\x45\xdf\x5e\x87\xd3\xd2\x74\x6e\xf6\xf3\xae\xd5\xfd\x81\x48\x97\xb7\xab\x49\x7d\xc1\x4e\x2a\xb3\x4e\x6a\xaf\x5b\x07\xb7\x5e\x31\x27\x7f\xc8\x66\xe3\xbc\x82\x0d\x51\xd0\xfe\x08\xea\xfb\x1f\x94\xb4\x32\xd4\xb0\x0d\x51\x93\xf2\x05\xc4\x35\xc1\x42\x1e\xe2\xc9\xfd\xac\x11\xb5\x0c\x00\xe7\xff\x49\x15\x89\x63\xee\xb1\xb2\xd6\x19\xbc\x86\xfb\xd9\x7b\x92\x99\x12\xb1\xc3\xbe\x1e\x46\xb1\x1c\x29\x90\xc4\xb0\x3d\xfe\x6f\xd4\x79\x3f\x06\xff\xdd\x82\xda\xf8\xac\xad\xe8\xc2\xb7\x23\xb5\x85\x36\x46\xfe\x7f\x9b\x93\x10\x39\x53\xdf\x82\x77\x4d\x9d\xe7\x22\x74\x88\xde\xab\x03\xcf\xd6\x89\x55\x64\x54\x07\xda\xe2\x65\x67\xab\xba\x04\x79\xd3\x30\x35\x19\xf7\xbd\x95\x71\x2f\xf0\x56\x8b\x86\x8e\x23\x53\x6e\x8f\xf5\x9c\xe7\xc1\x08\x61\x47\x6e\xec\xcd\x39\xd0\x6a\x94\x9a\x59\xa8\xee\x8a\x2e\x13\xd6\xf9\x32\x69\x7d\x67\x88\x32\x40\xe0\x87\x37\x50\xe4\x94\x18\x7b\x3f\x4a\xb0\xf7\xb0\xbb\x27\x9b\x1f\x3e\x36\x44\x69\xd8\x4a\x75\x20\x8a\x42\x21\x0c\xe3\x16\x7e\x04\xa2\xb0\xdd\xa1\x6a\x34\x6f\x6c\x35\xdc\x13\xee\x8f\x0d\x60\x2f\xfc\x49\xd8\x8e\x8c\xc9\x34\x44\x92\xa4\xa3\xb8\xee\x2e\x6c\x04\x88\xe1\x9b\x22\xdb\xa0\xf2\x5f\xf8\x26\x65\x7a\x1a\x12\x63\x94\x3f\xe9\x84\xcd\x64\x6a\x23\x60\xde\x1d\x8c\x1a\x0a\xab\x7e\x32\x3e\x47\xe9\x32\x0b\xb4\xfb\x8f\xfa\x44\xa2\xb5\x5f\x86\xe2\xe4\xae\xc5\xa1\x1b\x89\x93\x8f\x26\x6d\x4f\x5e\xaa\xc3\x45\xa7\xf8\x9a\x48\x1d\x06\x13\x9b\xa4\x93\x31\x39\x08\xa5\xaf\x6d\xee\xf9\xde\x48\xad\x18\x8f\xa3\x69\xdb\x15\xe5\x65\xf0\x5b\x3e\x28\x9f\x1c\xaf\x38\x80\xd1\xc9\x34\xd4\xc5\xa6\x7c\x54\xf0\x3f\x9d\xb6\xb8\xd6\x98\x2e\xea\xfb\xb7\xcd\xa0\x97\xb1\x5c\xba\xfd\x4c\xd0\xeb\x7f\x9e\xb9\x98\x2e\x5c\x1b\x0d\xcf\x77\xd6\x1d\xb3\x69\xfb\x19\xeb\x2b\x6d\x3b\x3e\xa6\x53\x20\x70\xc0\x8d\x76\xf3\x3f\x54\x89\xe2\x1e\x66\xca\x07\x98\x57\x6f\xdf\x74\x1f\x61\x9a\x6c\xf2\x2b\x4e\xdd\x9f\x54\xc7\x9f\x3d\x46\x7f\x68\x3d\x1c\x0e\xe1\x4e\xca\x1d\x2f\x7f\x62\x6d\x9e\x45\x22\x92\xb3\xf0\x41\x7b\x40\xf4\x51\x24\x40\x71\x8b\x6a\xdd\xe7\x52\x3f\x98\xac\xa2\xf2\x37\xbc\x55\x54\xfe\x59\xc4\x7f\x03\x00\x00\xff\xff\x4b\x4f\x59\x9c\x27\x21\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 8487, mode: os.FileMode(420), modTime: time.Unix(1650595675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
