// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// faucet.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x3a\xeb\x93\xe3\x34\xf2\x9f\x87\xbf\xa2\xf1\x6f\x21\xce\x6f\xc6\x76\xb2\xc3\xab\x92\x38\x57\x7b\x0b\x47\xed\x55\x1d\x6c\x1d\x50\x77\x57\xc0\x07\xc5\xea\xc4\x9a\x91\x25\x23\xc9\xc9\x84\x54\xfe\xf7\x2b\xc9\x8f\xf8\x95\x61\x81\xbd\x2f\xbb\xb2\xba\xd5\xef\x6e\x75\x2b\xb3\xfa\xf0\xcb\x6f\x5f\x7f\xff\x9f\xb7\x5f\x41\x6a\x32\xbe\xfe\x60\x65\xff\x03\x4e\xc4\x2e\xf6\x50\x78\xeb\x0f\x00\x56\x29\x12\x6a\x17\x00\xab\x0c\x0d\x81\x24\x25\x4a\xa3\x89\xbd\xc2\x6c\x83\x2f\x3c\x88\xda\xc0\xd4\x98\x3c\xc0\x5f\x0a\xb6\x8f\xbd\x7f\x07\x3f\xbc\x0a\x5e\xcb\x2c\x27\x86\x6d\x38\x7a\x90\x48\x61\x50\x98\xd8\x7b\xf3\x55\x8c\x74\x87\xbd\xb3\x82\x64\x18\x7b\x7b\x86\x87\x5c\x2a\xd3\x42\x3f\x30\x6a\xd2\x98\xe2\x9e\x25\x18\xb8\x8f\x3b\x60\x82\x19\x46\x78\xa0\x13\xc2\x31\x9e\x3b\x52\x25\x2d\xc3\x0c\xc7\xf5\xe9\x04\xe1\x37\x24\x43\x38\x9f\xe1\x6f\xa4\x48\xd0\xac\xa2\x12\x52\xa1\x71\x26\x1e\xdd\x0a\x20\x55\xb8\x8d\x3d\x2b\xba\x5e\x44\x51\x42\xc5\x83\x0e\x13\x2e\x0b\xba\xe5\x44\x61\x98\xc8\x2c\x22\x0f\xe4\x29\xe2\x6c\xa3\x23\x73\x60\xc6\xa0\x0a\x36\x52\x1a\x6d\x14\xc9\xa3\xfb\xf0\x3e\xfc\x3c\x4a\xb4\x8e\x9a\xbd\x30\x63\x22\x4c\xb4\xf6\x2a\x0e\x0a\x79\xec\x69\x73\xe4\xa8\x53\x44\x53\x6e\xd7\xca\xff\x51\x49\xb6\x52\x98\x80\x1c\x50\xcb\x0c\xa3\x4f\xc2\xcf\xc3\x99\x13\xa2\xbd\xfd\xae\x72\x94\x82\xe8\x44\xb1\xdc\x80\x56\xc9\x3b\xcb\xf0\xf0\x4b\x81\xea\x18\xdd\x87\xf3\x70\x5e\x7d\x38\x9e\x0f\xda\x5b\xaf\xa2\x92\xe0\xfa\x4f\x52\x0f\x84\x34\xc7\xe8\x65\xf8\x49\x38\x8f\x72\x92\x3c\x92\x1d\xd2\x9a\x97\x05\x85\xf5\xe6\x7b\xe4\x7c\xcd\xcb\x0f\x7d\x27\xbf\x1f\x76\x99\xcc\x50\x98\xf0\x41\x47\x2f\xc3\xf9\x17\xe1\xac\xde\x18\x72\xa8\x58\x58\x17\xae\x2b\xa7\x86\x7b\x54\x86\x25\x84\x07\x09\x0a\x83\x0a\x4e\x15\x00\x20\x63\x22\x48\x91\xed\x52\xb3\x80\xf9\x6c\xf6\xd1\xf2\x1a\x64\x9f\x5e\x40\x94\xe9\x9c\x93\xe3\x02\xb6\x1c\x9f\x2e\xdb\x84\xb3\x9d\x08\x98\xc1\x4c\x2f\xa0\xe4\x54\x03\xcf\xb5\x24\xb9\x92\x3b\x85\x5a\xb7\x44\xc8\xa5\x66\x86\x49\xb1\xb0\xc1\x47\x0c\xdb\xe3\xf5\x53\x3a\x27\x62\xf4\x28\xd9\x68\xc9\x0b\x83\x23\x42\x6e\xb8\x4c\x1e\x2f\xfb\xae\x3c\xf4\x95\x4d\x24\x97\x6a\x01\x87\x94\x99\x01\xf7\x5c\x61\x9b\x25\xa1\x94\x89\xdd\x02\x3e\xcb\x5b\xaa\x67\x44\xed\x98\x58\xc0\xac\x7b\x78\x15\x35\x7e\x58\x45\x65\x99\xb4\xcb\x8d\xa4\xc7\x2a\x14\x28\xdb\x43\xc2\x89\xd6\xb1\xd7\x73\x92\x57\x7b\xaf\x8d\x63\x2b\x1e\x61\xa2\x05\xed\xc2\x95\x3c\x78\xe0\x78\xc6\x5e\x29\x53\xb0\x91\xc6\xc8\x6c\x01\xf3\xcf\xf2\xa7\xd6\xa9\x3e\x5d\x1e\xf0\x5d\x30\x7f\xd9\xc1\xb0\xb5\x7d\x5e\x93\x33\xf8\x64\x02\xe7\xe2\xda\xb9\x3d\x5c\x80\x15\xab\xe9\x6d\x09\x6c\x49\xb0\x21\x26\xf5\x80\x28\x46\x82\x94\x51\x8a\x22\xf6\x8c\x2a\xd0\x46\x2b\xeb\x9f\x1d\x96\xe3\xae\x20\x51\x3a\xef\x08\x1f\x51\xb6\x6f\xd9\xa0\xf7\xd9\x33\xc9\x6f\xa8\xfd\x05\x54\x0b\xb9\xdd\x6a\x34\xc1\xc0\x0a\xad\x23\x4c\xe4\x85\x09\x76\x4a\x16\xf9\x88\xfe\x16\xd8\xdb\x04\x60\x34\xf6\x0a\xc5\xbd\x01\xa0\xbc\xcf\x46\x41\xe6\x98\x57\x36\x1f\xc2\x6a\x1b\x4b\x95\x05\x36\x20\x94\x1c\x21\x90\x73\x92\x60\x2a\x39\x45\x15\x7b\x6f\x39\x12\x8d\xe0\xc4\x83\xa3\x2c\x14\x1c\x08\xe7\x68\x80\x50\x6a\xf3\x2a\x0c\xc3\x3e\x85\x68\xa0\x9c\xcb\xbd\xa1\x15\x82\x8d\x11\x03\x4b\xd8\x20\x2f\x8c\x91\x62\xb0\xdf\x88\xbf\x31\x02\x36\x46\x04\x14\xb7\xa4\xe0\x06\xa8\x92\x39\x95\x07\x11\x18\xb9\xdb\x71\x1c\x6a\x54\x1b\xa5\x24\x3c\x06\xa7\xc4\x90\xea\x78\xec\xd5\xf4\xc6\x10\xcb\x90\x24\x3a\x97\x79\x91\x57\x41\x79\x0d\x0d\x9f\x72\x22\x28\x52\x1b\xd4\x5c\x8f\xe0\x0d\x75\x07\xf8\x9a\xed\x11\x32\x1c\x81\xf4\x73\x24\x21\x0a\x4d\xe0\x04\x7d\xc7\x4c\xb1\xd1\x5e\xda\x60\x04\x52\xf0\x9a\x7c\x63\xcf\x0c\x45\x01\x9d\xaf\x40\xd9\xb2\x3e\xe2\x34\x9b\x86\x8a\x88\x1d\xc2\x0b\x46\x9f\xee\xe0\x05\xc9\x64\x21\x0c\x2c\x62\x08\x5f\xb9\xa5\x3e\x9f\xc7\x94\xe2\x23\x52\x3a\x00\x19\xdd\x86\x67\x8a\xca\x95\x03\x52\x24\x9c\x25\x8f\xb1\x67\x18\xaa\xf8\x74\xb2\x02\x9e\xcf\x4b\x38\x9d\xd8\x16\x5e\x84\xff\xc4\x84\xe4\x26\x49\xc9\xf9\xbc\x53\xf5\x3a\xc4\x27\x4c\x0a\x83\xfe\xf4\x74\x42\xae\xf1\x7c\xd6\xc5\x26\x63\xc6\xaf\x8f\xdb\x7d\x41\xcf\xe7\x6b\x4c\xd7\xa7\x53\x65\x82\xf3\x19\x22\xcb\x4b\x50\x7c\x82\x17\xe1\x5b\x54\x4c\x52\x0d\x25\x99\x55\x34\xae\xe6\x98\x4d\x56\xd1\xb8\xad\x2a\x49\x46\x7c\x5d\xf0\x41\x2a\x46\x36\x17\x7b\x35\xaa\x5b\x01\x4b\x92\x6c\x0b\x6d\xcb\x0c\x8a\x5a\x8f\x6e\x15\x39\xbb\xa0\xb1\x60\xdf\x30\x2e\xc3\x34\x33\xf8\x88\xc7\xd8\x3b\x9d\xda\xd4\x47\x71\x13\xc2\xf9\x86\x58\xbf\x95\xa6\xbf\x42\xf0\x57\xb4\x35\x65\xcf\xb4\x9b\x03\x3a\x38\xeb\x51\xcd\xfa\xc6\x7a\xee\x3e\x68\x7d\xb4\x97\xed\x96\x0c\x20\x8a\xe0\x6b\x2e\x37\x84\xc3\xde\xa6\xe1\x86\xa3\x06\x23\xc1\x56\x50\x30\x29\x42\x52\x28\x85\xc2\x80\x36\xc4\x14\x1a\xe4\xd6\xed\x6e\xdb\x37\xd5\x9e\x28\x20\xc6\x60\x96\x1b\x88\x2f\xad\x80\xdd\xd6\xa8\xf6\x97\x6e\xc8\xee\xd8\x30\xee\x63\x29\xfc\xa5\x40\x6d\x34\xc4\xf0\xe3\xcf\xcb\x0f\x2e\x92\x7d\x89\x5b\x26\x10\x08\x6c\x0b\x91\xd8\x86\x07\x4c\x4a\x0c\x24\x0a\x89\x41\x0d\x09\x97\xba\x50\xa5\xc0\x36\xd1\xc1\x0a\x5d\x13\x6b\xd1\xb7\xb0\xdc\xb1\xad\xe9\xf8\x29\xd1\xe9\xb4\x69\x6f\x6e\x14\x9a\x42\x89\x0b\xb8\x05\xba\xd9\x4a\x05\xbe\x25\xc3\xe2\xd9\x12\xd8\xaa\x66\x10\x72\x14\x3b\x93\x2e\x81\xdd\xde\xb6\xf1\x6f\xd8\x16\xfc\x1a\xe9\x47\xf6\x73\x68\x9e\x42\xcb\x0e\xe2\x18\x7a\x6c\x6f\x6e\x6e\x1a\x6a\x3a\xe7\x2c\x41\x9f\xdd\xc1\x7c\xba\x6c\x21\x6c\x14\x92\xc7\xd6\xc6\xb9\x59\x36\xab\x7a\x71\x5e\x0e\x4c\xe7\x9c\xd5\x31\x5e\x19\x8f\x1a\x08\xec\x98\x36\x50\x28\x6e\xcd\x67\xf1\x4a\x67\xb5\xbd\xe7\x50\xdb\x66\x1b\xa4\x56\xb5\xa8\x02\xb3\xa5\x5a\x49\x2c\xd4\x28\xa8\xff\xf7\xef\xbe\xfd\x26\xd4\x46\x31\xb1\x63\xdb\xa3\x7f\x2a\x14\x5f\xc0\x0b\xdf\xfb\x3f\xdb\x02\x4c\x7f\x9c\xfd\x1c\xee\x09\x2f\xf0\xce\x05\xc7\xc2\xfd\x3b\x60\x74\x07\xd5\x72\x01\x5d\x9e\xe7\xe9\x74\x79\x2d\xe3\x6f\x5a\x35\x51\xa1\x46\xe3\x5b\xdc\x76\x0e\x8d\x98\x8c\x40\x86\x26\x95\xd4\x9a\x45\x61\x22\x85\xc0\xc4\x40\x91\x4b\x51\x59\x08\xb8\xd4\xba\x13\xbe\x35\x52\x3c\x1a\x41\xd5\xa9\x18\x04\x1e\xe0\x5f\xb8\xf9\x4e\x26\x8f\x68\x7c\xdf\x3f\x30\x41\xe5\x21\xe4\x32\x21\xf6\x8c\x6d\xf7\x8d\x4c\x24\x87\x38\x8e\xa1\x9a\x90\xbc\x29\xfc\x05\xbc\x83\xb6\xb3\x92\x07\x0b\xbb\xb4\xab\x29\xdc\x42\xff\x78\x2a\xb5\x81\x5b\xf0\x22\x92\x33\x6f\xda\xe4\x51\xed\x0a\x29\x32\xd4\x9a\xec\xb0\x2d\x26\xee\x51\x98\x76\x44\x5a\x85\x32\xbd\x83\x18\x9c\xd7\x72\xa2\x34\x96\x58\xa1\xad\x59\xad\xd0\xb4\x61\xee\x30\xe3\x18\x44\xc1\x79\x27\xae\xcb\x84\x5a\xb6\x62\xb5\x7f\x2e\x44\xa5\xa4\x82\x0f\xe3\x18\x0a\x41\x9d\xe9\x69\x87\x84\x9d\x60\xfd\x13\x27\x47\x59\x98\x05\x4c\x8c\xcc\x5f\xbb\x9b\x72\x72\x07\xf6\xfa\x5c\x40\x43\xe4\xce\x75\x48\x0b\x98\xb8\x2f\x0b\x67\x19\xba\x53\x9f\xce\x66\xb3\x3b\xa8\xc7\xa8\xbf\x12\x1b\x5d\xaa\xc0\xf3\x74\x39\xcc\xa2\x46\x30\x5d\x24\x89\x1d\xba\xfe\xa4\x68\x15\x99\x46\xb8\xea\xfb\x4f\x8b\xd7\x54\xcb\x8e\x7c\xf0\xf1\xc7\x30\x80\x0e\xdc\x12\x45\xf0\x0f\xa2\x1e\x81\x70\x6e\xe7\xbb\x3d\x93\x85\xbe\x94\xdf\x8c\x69\xcd\xc4\x0e\x88\x06\x2a\x05\x5e\x8e\xfd\xee\x12\x38\x10\xb6\xc2\x84\x35\xcc\xfa\x92\xda\xfc\x6f\x95\xc8\x91\xca\xd9\x25\x3d\xa8\x88\x2d\x1b\x8d\x14\x5f\x96\x21\x7c\x18\x83\xe7\xf5\xa8\x0c\x90\x2c\x4e\x9b\xea\x8d\x46\xf3\x7d\xe9\x29\xbf\xba\x41\xc6\xca\xfa\xf4\x0e\xee\x67\xb3\xd9\xf4\x8a\x40\xe7\x8e\xf1\x5f\xe5\x39\x0a\x0a\x44\x1c\x5d\x31\x68\x2c\xcf\x84\x91\x60\xe7\x13\x9b\xcc\xdc\x8e\x65\x1c\x5d\x82\x5e\x4e\x5b\xf3\x27\x32\xcb\xa4\x80\x18\x82\xf9\x72\xfc\xbe\x69\xd9\xb9\xab\x6f\xdf\x85\x23\xce\x19\x71\x63\xd7\x9c\x3d\xfc\x60\xde\x71\x5c\xc7\xa7\x57\x9d\x77\xd3\xe8\xc0\x3a\xc6\x1e\x7a\xb5\xe3\xd6\x71\x8b\xb6\x94\x2a\xc9\xde\xce\xdf\x5d\xb7\x06\x23\x2f\x74\xea\xf7\xa4\x9f\x8e\xde\xb8\xd6\x85\x6f\x0c\x2a\x62\x10\xa4\xad\xe9\xd6\x65\x28\x0c\x53\x38\xf0\x1c\x10\x61\x9b\x91\x40\xa1\xa0\xa8\xea\x8b\x98\xda\xfc\x32\xb6\xcd\xea\x7b\xd6\x3d\xe9\xf6\x83\xb0\xa5\xe0\xc0\xf8\x4b\x60\xb0\xb6\x9d\x14\xb0\x20\xe8\xaa\xe6\x9a\x1e\x29\xd0\x7e\xf7\x32\xca\x45\x7a\x3f\xd4\x2d\x3e\x72\x92\x6b\xa4\x10\x43\xf9\xc4\xe6\x4f\xc3\x42\xb0\x27\x7f\x1a\x54\xdf\x7d\x32\x35\xfc\x72\xd1\x38\xef\x96\x7a\xdc\xc6\xe0\xad\x8c\x02\x46\xe3\x89\x07\xb7\x63\x59\x6d\xaf\xaa\xc9\xba\x23\x47\xfb\x34\xc0\xca\xd0\xb5\x7b\x82\x28\x87\xa6\x9f\x3c\xdb\x50\xdb\xd9\x5b\xd0\x85\xed\x5b\xfc\x01\x65\xb2\x27\x86\x28\x47\x78\xba\x84\x0b\xba\xeb\xb4\x17\x90\x58\x9f\x2d\xab\x97\xb0\xfb\x97\xf9\xd3\x12\xea\x97\xbe\xf2\x6b\x23\x15\x45\x15\x28\x42\x59\xa1\x17\xf0\x49\xfe\xb4\xfc\xc9\xab\x1a\xf1\x55\x64\xe8\x6f\x4a\x9b\x2b\x5c\x0f\x84\x4a\x12\x37\x4c\xde\x82\xb7\x8a\x2c\xc2\x3b\x50\x6a\x54\x6e\xbf\xda\xc1\x70\x6a\x5c\x42\xf3\x7a\x56\xed\x67\x8c\x52\x8e\x56\xec\x0e\x07\x9b\xc7\x36\x22\x7a\xd9\xd8\x65\x0c\x2e\x42\x91\x76\x4e\x9e\xc1\x8e\x90\xcf\x1f\x2b\xdf\x48\xac\xaf\x6d\x60\x04\xd6\x02\xcc\x79\xa1\x1a\xad\xdc\xb6\x9a\x38\xd3\x54\x0f\xb8\xb4\x50\xae\x6b\xf1\x83\x2a\xf0\xee\x60\xa2\x6d\x23\x45\xf5\x64\x1a\xa6\x45\x46\x04\xfb\x15\x7d\x7b\x1d\x4e\x4b\xd3\xb9\xd9\xcf\xbb\x56\xf7\x07\x22\x5d\xde\xae\x26\xf5\x05\x3b\xa9\xcc\x3a\xa9\xbd\x6e\x1d\xdc\x7a\xc3\x9c\xfc\x21\x9b\x8d\xf3\x0a\x36\x44\x41\xfb\x23\xa8\xef\x7f\x50\xd2\xca\x50\xc3\x36\x44\x4d\xca\x17\x10\xd7\x04\x0b\x79\x88\x27\xf7\xb3\x46\xd4\x32\x00\x9c\xff\x27\x55\x24\x8e\xb9\xc7\xca\x5a\x67\xf0\x1a\xee\x67\xef\x49\x66\x4a\xc4\x0e\xfb\x7a\x18\xc5\x72\xa4\x40\x12\xc3\xf6\xf8\xbf\x51\xe7\xfd\x18\xfc\x77\x0b\x6a\xe3\xb3\xb6\xa2\x0b\xdf\x8e\xd4\x16\xda\x18\xf9\xff\x6d\x4e\x42\xe4\x4c\x7d\x0b\xde\x35\x75\x9e\x8b\xd0\x21\x7a\xaf\x0e\x3c\x5b\x27\x56\x91\x51\x1d\x68\x8b\x97\x9d\xad\xea\x12\xe4\x4d\xc3\xd4\x64\xdc\xf7\x56\xc6\xbd\xbf\x5b\x2d\x1a\x3a\x8e\x4c\xb9\x3d\xd6\x73\x9e\x07\x23\x84\x1d\xb9\xb1\x37\xe7\x40\xab\x51\x6a\x66\xa1\xba\x2b\xba\x4c\x58\xe7\xcb\xa4\xf5\x9d\x21\xca\x00\x81\x1f\xde\x40\x91\x53\x62\xec\xfd\x28\xc1\xde\xc3\xee\x9e\x6c\x7e\xf6\xd8\x10\xa5\x61\x2b\xd5\x81\x28\x0a\x85\x30\x8c\x5b\xf8\x11\x88\xc2\x76\x87\xaa\xd1\xbc\xb1\xd5\x70\x4f\xb8\x3f\x36\x80\xbd\xf0\x27\x61\x3b\x32\x26\xd3\x10\x49\x92\x8e\xe2\xba\xbb\xb0\x11\x20\x86\x6f\x8a\x6c\x83\xca\x7f\xe1\x9b\x94\xe9\x69\x48\x8c\x51\xfe\xa4\x13\x36\x93\xa9\x8d\x80\x79\x77\x30\x6a\x28\xac\xfa\xc9\xf8\x1c\xa5\xcb\x2c\xd0\xee\x3f\xea\x13\x89\xd6\x7e\x19\x8a\x93\xbb\x16\x87\x6e\x24\x4e\x3e\x9a\xb4\x3d\x79\xa9\x0e\x17\x9d\xe2\x6b\x22\x75\x18\x4c\x6c\x92\x4e\xc6\xe4\x20\x94\xbe\xb6\xb9\xe7\x7b\x23\xb5\x62\x3c\x8e\xa6\x6d\x57\x94\x97\xc1\x6f\xf9\xa0\x7c\x72\xbc\xe2\x00\x46\x27\xd3\x50\x17\x9b\xf2\x51\xc1\xff\x74\xda\xe2\x5a\x63\xba\xa8\xef\xdf\x36\x83\x5e\xc6\x72\xe9\xf6\x33\x41\xaf\xff\x79\xe6\x62\xba\x70\x6d\x34\x3c\xdf\x59\x77\xcc\xa6\xed\x67\xac\xaf\xb4\xed\xf8\x98\x4e\x81\xc0\x01\x37\xda\xcd\xff\x50\x25\x8a\x7b\x98\x29\x1f\x60\x5e\xbd\x7d\xd3\x7d\x84\x69\xb2\xc9\xaf\x38\x75\x7f\x50\x1d\x7f\xf6\x18\xfd\x99\xf5\x70\x38\x84\x3b\x29\x77\xbc\xfc\x81\xb5\x79\x16\x89\x48\xce\xc2\x07\xed\x01\xd1\x47\x91\x00\xc5\x2d\xaa\x75\x9f\x4b\xfd\x60\xb2\x8a\xca\x5f\xf0\x56\x51\xf9\x47\x11\xff\x0d\x00\x00\xff\xff\xef\xb3\x09\x4c\x25\x21\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 8485, mode: os.FileMode(420), modTime: time.Unix(1650596342, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
